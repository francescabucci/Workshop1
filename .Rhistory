print("Advised to select a different data transformation procedure")}
(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] )
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "log_10" # options are: cube_root, square_root, log_2, log_10
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
eighty_percent <- floor(((columns)/10)*8)
#Print relevant information:
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > eighty_percent ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for more then 80% of your data")} else{
print("Advised to select a different data transformation procedure")}
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1]
floor(((columns)/10)*8)
floor(((columns)/10)*7.5)
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "cube_root" # options are: log_2, log_10, square_root, cube_root
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
seventyfive_percent <- floor(((columns)/10)*75)
#Print relevant information:
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > seventyfive_percent ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for more then 80% of your data")} else{
print("Advised to select a different data transformation procedure")}
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1]
floor(((columns)/10)*75)
seventyfive_percent <- floor(((columns)/10)*7.5)
#Print relevant information:
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > seventyfive_percent ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for more then 80% of your data")} else{
print("Advised to select a different data transformation procedure")}
# Visualize all information in a heatmap
heatmaply::heatmaply(metabolomicsDataGroups_transformed[,5:103], grid_gap = 0, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10))
if(!"rstatix" %in% installed.packages()){install.packages("rstatix")}
library(rstatix)
if(!"rstatix" %in% installed.packages()){install.packages("rstatix")}
library(rstatix)
qqPlot(metabolomicsDataGroups_transformed$XXL.VLDL.PL_.)
?qqPlot
??qqPlo
??qqPlot
qqPlot(metabolomicsDataGroups_transformed$'XXL.VLDL.PL_.')
if(!"car" %in% installed.packages()){install.packages("car")}
library(car)
if(!"nloptr" %in% installed.packages()){install.packages("nloptr")}
if(!"car" %in% installed.packages()){install.packages("car")}
R.version()
version
library(car) #(Companion to Applied Regression)
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"stringr" %in% installed.packages()){install.packages("stringr")}
#load libraries
library(dplyr)
library(stringr)
library(car) #(Companion to Applied Regression)
install.packages('car')
BiocManager::available('car')
BiocManager::install(car, type = "source", checkBuilt = TRUE)
BiocManager::install("car")
library(car) #(Companion to Applied Regression)
# Libraries
library(ggplot2)
library(dplyr)
library(forcats)
if(!"forcats" %in% installed.packages()){install.packages("forcats")}
library(forcats)
library(hrbrthemes)
if(!"hrbrthemes" %in% installed.packages()){install.packages("hrbrthemes")}
library(hrbrthemes)
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"stringr" %in% installed.packages()){install.packages("stringr")}
#load libraries
library(dplyr)
library(stringr)
---
title: "metabolomicsProcessingDIY"
---
title: "metabolomicsProcessingDIY"
---
title: "metabolomicsProcessingDIY"
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"stringr" %in% installed.packages()){install.packages("stringr")}
#load libraries
library(dplyr)
library(stringr)
Sys.setenv(LANGUAGE="en")
#Download ‘readxl’ package
#Load the ‘readxl’ package
if(!"readxI" %in% installed.packages()){install.packages("readxI")}
#Download ‘readxl’ package
#Load the ‘readxl’ package
if(!"readxl" %in% installed.packages()){install.packages("readxl")}
libray("readxl")
library("readxl")
#Download ‘readxl’ package
#Load the ‘readxl’ package
if(!"readxl" %in% installed.packages()){install.packages("readxl")}
library("readxl")
#Add data location as variable
dataLocation <- paste0(getwd(), '/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx')
#Read the first tab of the data file
metabolomicsData <- read_excel(dataLocation, 1)
#Make a copy of the data to compare against if needed
getwd()
#Download ‘readxl’ package
#Load the ‘readxl’ package
if(!"readxl" %in% installed.packages()){install.packages("readxl")}
library("readxl")
#Add data location as variable
dataLocation <- paste0(getwd(), '/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx')
#Read the first tab of the data file
metabolomicsData <- read_excel(dataLocation, 1)
#Make a copy of the data to compare against if needed
getwd()
#Read the first tab of the data file
metabolomicsData <- read_excel(dataLocation, 1)
metabolomicsData
View(metabolomicsData)
View(metabolomicsData)
get()
getwd()
# Convert the textual 'NA' labels with the real NA (not available)
metabolomicsData[metabolomicsData == "NA"] <- NA
# Check how many NAs are part of sample '2_A5'.
sum(is.na(metabolomicsData$`Sample name` == "...")) ##Fill in the missing information at the '...'
if(!"heatmaply" %in% installed.packages()){install.packages("heatmaply")}
library("heatmaply")
View(metabolomicsData)
#Visualize this information in a heatmap
heatmaply::heatmaply(is.na10(metabolomicsData[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10)))
#Visualize this information in a heatmap
heatmaply::heatmaply(is.na10(metabolomicsData[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10)))
# Make sure all data is captured as numbers (numeric!)
metabolomicsData <- data.frame(metabolomicsData[,1:2], lapply(metabolomicsData[,3:length(metabolomicsData)],as.numeric))
# Remove rows with too many NAs
metabolomicsData <- metabolomicsData[complete.cases(metabolomicsData[ , 3:length(metabolomicsData)]),]
heatmaply::heatmaply(is.na10(metabolomicsData[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10)))
heatmaply::heatmaply(grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10)))
heatmaply::heatmaply(is.na10(metabolomicsData[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10)))
heatmaply::heatmaply(metabolomicsData[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10)))
heatmaply::heatmaply(metabolomicsData[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10))
# Download the file 'targets.csv' from Surfdrive, add this to the Data folder, and change the location of data you want to load
dataLocation <- paste0(getwd(), '/Data/ ... .csv')
# Load the targets data
treatmentData <- read.csv(dataLocation, header = TRUE)
# Download the file 'targets.csv' from Surfdrive, add this to the Data folder, and change the location of data you want to load
dataLocation <- paste0(getwd(), '/Data/ target.csv')
# Load the targets data
treatmentData <- read.csv(dataLocation, header = TRUE)
# Download the file 'targets.csv' from Surfdrive, add this to the Data folder, and change the location of data you want to load
dataLocation <- paste0(getwd(), '/Data/target.csv')
# Load the targets data
treatmentData <- read.csv(dataLocation, header = TRUE)
#filter out data if the 'Sample name' column is NA
metabolomicsData <- subset(metabolomicsData, !is.na(metabolomicsData$...))
# Inspect the remaining samples names; do any stand out (in a negative way)? If yes, remove these. Note: != stands for 'is not equal to'
metabolomicsData <- subset(metabolomicsData, metabolomicsData$Sample.name != '...')
# Download the file 'targets.csv' from Surfdrive, add this to the Data folder, and change the location of data you want to load
dataLocation <- paste0(getwd(), '/Data/target.csv')
# Load the targets data
treatmentData <- read.csv(dataLocation, header = TRUE)
# Download the file 'targets.csv' from Surfdrive, add this to the Data folder, and change the location of data you want to load
dataLocation <- paste0(getwd(), '/Data/targets.csv')
# Load the targets data
treatmentData <- read.csv(dataLocation, header = TRUE)
treatmentData
View(treatmentData)
View(treatmentData)
treatmentData
# Make sure all data is captured as numbers (numeric!)
metabolomicsData <- data.frame(metabolomicsData[,1:2], lapply(metabolomicsData[,3:length(metabolomicsData)],as.numeric))
# Remove rows with too many NAs
metabolomicsData <- metabolomicsData[complete.cases(metabolomicsData[ , 3:length(metabolomicsData)]),]
metabolomicsData
#Read the first tab of the data file
metabolomicsData <- read_excel(dataLocation, 1)
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"stringr" %in% installed.packages()){install.packages("stringr")}
#load libraries
library(dplyr)
library(stringr)
#Download ‘readxl’ package
#Load the ‘readxl’ package
if(!"readxl" %in% installed.packages()){install.packages("readxl")}
library("readxl")
#Add data location as variable
dataLocation <- paste0(getwd(), '/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx')
#Read the first tab of the data file
metabolomicsData <- read_excel(dataLocation, 1)
#Make a copy of the data to compare against if needed
#Use the search box to find sample ‘2_A5’
# Convert the textual 'NA' labels with the real NA (not available)
metabolomicsData[metabolomicsData == "NA"] <- NA
# Check how many NAs are part of sample '2_A5'.
sum(is.na(metabolomicsData$`Sample name` == "...")) ##Fill in the missing information at the '...'
# Install the required package
####..... missing step ...####
####..... missing step ...####
if(!"heatmaply" %in% installed.packages()){install.packages("heatmaply")}
library("heatmaply")
#Visualize this information in a heatmap
heatmaply::heatmaply(is.na10(metabolomicsData[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10)))
#lipids measured on horizontal axis, samples on vertical axis
# in the legend1 means NA values and 0 means lipids were measured
#is.na10 shows all NAs as number between 1 and 0
# Make sure all data is captured as numbers (numeric!)
metabolomicsData <- data.frame(metabolomicsData[,1:2], lapply(metabolomicsData[,3:length(metabolomicsData)],as.numeric))
# Remove rows with too many NAs
metabolomicsData <- metabolomicsData[complete.cases(metabolomicsData[ , 3:length(metabolomicsData)]),]
# Visualize all information in a heatmap
####..... missing step ...#### Tip: use the previous line of code for heatmaply, without counting NAs. When in doubt, type ?heatmaply in the console below, to open a help menu for this function and example.
heatmaply::heatmaply(metabolomicsData[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10))
# Make sure all data is captured as numbers (numeric!)
metabolomicsData <- data.frame(metabolomicsData[,1:2], lapply(metabolomicsData[,3:length(metabolomicsData)],as.numeric))
# Remove rows with too many NAs
metabolomicsData <- metabolomicsData[complete.cases(metabolomicsData[ , 3:length(metabolomicsData)]),]
# Download the file 'targets.csv' from Surfdrive, add this to the Data folder, and change the location of data you want to load
dataLocation <- paste0(getwd(), '/Data/targets.csv')
# Load the targets data
treatmentData <- read.csv(dataLocation, header = TRUE)
# Clean up the sample names (since they are not the same for metabolomics)
treatmentData$SampleName<-gsub("X","",as.character(treatmentData$SampleName))
treatmentData$SampleName<-gsub("\\..*","",as.character(treatmentData$SampleName))
treatmentData$...<-gsub("line","",as.character(treatmentData$...))
treatmentData$Timepoint.<-gsub("line","",as.character(treatmentData$...))
treatmentData$Timepoint<-gsub("line","",as.character(treatmentData$...))
treatmentData$Timepoint<-gsub("line","",as.character(treatmentData$Timepoint))
View(metabolomicsData)
View(metabolomicsData)
#rename columns of treatmentData to match with metabolomics data
colnames(treatmentData) <- c("Sample.name","time","Diet" )
# Finally, combine this data (specifically column 3 from targets data) with the metabolomics data
metabolomicsDataGroups <- merge(treatmentData, metabolomicsData,by="Sample.name")
metabolomicsDataGroups
View(metabolomicsDataGroups)
#rename columns of treatmentData to match with metabolomics data
colnames(treatmentData) <- c("Sample.name","Timepoint","Diet" )
# Finally, combine this data (specifically column 3 from targets data) with the metabolomics data
metabolomicsDataGroups <- merge(treatmentData, metabolomicsData,by="Sample.name")
#Sanity check: do all the timepoints (base,end) from treatmentData match with the metabolomics data time column
all(metabolomicsDataGroups$Timepoint == metabolomicsDataGroups$time)
#Count number of columns
columns <- ncol(metabolomicsDataGroups) ##To apply transformation on all columns
columns
#rename columns of treatmentData to match with metabolomics data
colnames(treatmentData) <- c("Sample.name","Timepoint","Diet" )
# Finally, combine this data (specifically column 3 from targets data) with the metabolomics data
metabolomicsDataGroups <- merge(treatmentData, metabolomicsData,by="Sample.name")
#Sanity check: do all the timepoints (base,end) from treatmentData match with the metabolomics data time column
all(metabolomicsDataGroups$Timepoint == metabolomicsDataGroups$time)
rm(columns)
#Count number of columns
##columns <- ncol(metabolomicsDataGroups) ##To apply transformation on all columns
columns <- 102 ##To use the actual data, not calculated ratios based on this data.
f(transformation == "cube_root"){
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "log_2" # options are: log_2, log_10, square_root, cube_root
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
View(metabolomicsDataGroups_transformed)
View(metabolomicsDataGroups_transformed)
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
metabolomicsDataGroups_Shapiro
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
percentageThreshold <- floor(((columns)/10)*7.5)
percentageThreshold
print("Advised to select a different data transformation procedure")}
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > percentageThreshold ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for 75% or more of your data")} else{
print("Advised to select a different data transformation procedure")}
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > percentageThreshold ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for 75% or more of your data")} else{
print("Advised to select a different data transformation procedure")}
# Libraries (dplyr already previously loaded but also important)
if(!"ggplot2" %in% installed.packages()){install.packages("ggplot2")}
library(ggplot2)
if(!"forcats" %in% installed.packages()){install.packages("forcats")}
library(forcats)
if(!"hrbrthemes" %in% installed.packages()){install.packages("hrbrthemes")}
library(hrbrthemes)
if(!"viridis" %in% installed.packages()){install.packages("viridis")}
library(viridis)
if(!"ggbeeswarm" %in% installed.packages()){install.packages("ggbeeswarm")}
library(ggbeeswarm)
##### Example data to check if setup of packages is correct #####
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
mutate(tip = round(tip/total_bill*100, 1))
# Grouped
data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
##### Example data to check if setup of packages is correct #####
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
mutate(tip = round(tip/total_bill*100, 1))
# Grouped
data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
percentageThreshold <- floor(((columns)/10)*7.5)
print("Advised to select a different data transformation procedure")}
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > percentageThreshold ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for 75% or more of your data")} else{
print("Advised to select a different data transformation procedure")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
mutate(tip = round(tip/total_bill*100, 1))
data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
0_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
mutate(tip = round(tip/total_bill*100, 1))
##### Example data to check if setup of packages is correct #####
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
mutate(tip = round(tip/total_bill*100, 1))
lipidClassName <- 'IDL.L'
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
lipidClassName <- 'IDL.L'
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
##### Example data to check if setup of packages is correct #####
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
mutate(tip = round(tip/total_bill*100, 1))
lipidClassName <- 'IDL.L'
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
# Grouped
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
### To be added by you!
heatmaply::heatmaply(metabolomicsDataGroups_transformed[,5:103], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10))
### To be added by you!
heatmaply::heatmaply(metabolomicsDataGroups_transformed[5:103], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10))
### To be added by you!
heatmaply::heatmaply(metabolomicsDataGroups_transformed[5:103], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10))
heatmaply::heatmaply(metabolomicsDataGroups_transformed[,5:103], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10))
### To be added by you!
heatmaply::heatmaply(metabolomicsDataGroups_transformed[,5:102], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10))
##Order columns based on Diet column (located in column names);
mSet_FINAL <- metabolomicsDataGroups_transformed[order(metabolomicsDataGroups_transformed$Diet),]
View(mSet_FINAL)
View(mSet_FINAL)
##Create one dataframe for the control group:
mSet_control <- subset(mSet_FINAL, mSet_FINAL$Diet == 'C_diet')
#Size of control group:
mSet_control_size <- nrow(mSet_control)
##Create another dataframe for the treated group:
mSet_treated <- subset(mSet_FINAL, mSet_FINAL$Diet == 'Ex_diet')
#Size of experimental group:
mSet_treated_size <- nrow(mSet_treated)
grp <- mSet_FINAL$Diet
tests_list <- lapply(names(mSet_FINAL[5:ncol(mSet_FINAL)]), function(x) t.test(as.formula(paste0(x, "~ grp")), data = mSet_FINAL[,5:ncol(mSet_FINAL)]))
tests_list
result <- do.call(rbind, lapply(tests_list, `[[`, "estimate"))
pval <- sapply(tests_list, `[[`, "p.value")
result <- cbind(names(mSet_FINAL[5:ncol(mSet_FINAL)]), result, p.value = pval)
result
result
result <- cbind(names(mSet_FINAL[5:ncol(mSet_FINAL)]), result, p.value = pval)
result <- do.call(rbind, lapply(tests_list, `[[`, "estimate"))
pval <- sapply(tests_list, `[[`, "p.value")
result <- cbind(names(mSet_FINAL[5:ncol(mSet_FINAL)]), result, p.value = pval)
result
